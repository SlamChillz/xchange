// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/slamchillz/xchange/db/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination db/mock/storage.go github.com/slamchillz/xchange/db/sqlc Store
//
// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	db "github.com/slamchillz/xchange/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CoinSwapUpdateUserPaid mocks base method.
func (m *MockStore) CoinSwapUpdateUserPaid(arg0 context.Context, arg1 db.CoinSwapUpdateUserPaidParams) (db.Coinswap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CoinSwapUpdateUserPaid", arg0, arg1)
	ret0, _ := ret[0].(db.Coinswap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CoinSwapUpdateUserPaid indicates an expected call of CoinSwapUpdateUserPaid.
func (mr *MockStoreMockRecorder) CoinSwapUpdateUserPaid(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CoinSwapUpdateUserPaid", reflect.TypeOf((*MockStore)(nil).CoinSwapUpdateUserPaid), arg0, arg1)
}

// CreateAdmindata mocks base method.
func (m *MockStore) CreateAdmindata(arg0 context.Context, arg1 db.CreateAdmindataParams) (db.Admindatum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdmindata", arg0, arg1)
	ret0, _ := ret[0].(db.Admindatum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdmindata indicates an expected call of CreateAdmindata.
func (mr *MockStoreMockRecorder) CreateAdmindata(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmindata", reflect.TypeOf((*MockStore)(nil).CreateAdmindata), arg0, arg1)
}

// CreateCustomer mocks base method.
func (m *MockStore) CreateCustomer(arg0 context.Context, arg1 db.CreateCustomerParams) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", arg0, arg1)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockStoreMockRecorder) CreateCustomer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockStore)(nil).CreateCustomer), arg0, arg1)
}

// CreateSwap mocks base method.
func (m *MockStore) CreateSwap(arg0 context.Context, arg1 db.CreateSwapParams) (db.Coinswap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSwap", arg0, arg1)
	ret0, _ := ret[0].(db.Coinswap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSwap indicates an expected call of CreateSwap.
func (mr *MockStoreMockRecorder) CreateSwap(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSwap", reflect.TypeOf((*MockStore)(nil).CreateSwap), arg0, arg1)
}

// GetBtcAddress mocks base method.
func (m *MockStore) GetBtcAddress(arg0 context.Context, arg1 int32) (sql.NullString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBtcAddress", arg0, arg1)
	ret0, _ := ret[0].(sql.NullString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBtcAddress indicates an expected call of GetBtcAddress.
func (mr *MockStoreMockRecorder) GetBtcAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBtcAddress", reflect.TypeOf((*MockStore)(nil).GetBtcAddress), arg0, arg1)
}

// GetCustomerBankDetails mocks base method.
func (m *MockStore) GetCustomerBankDetails(arg0 context.Context, arg1 int32) (db.Bankdetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerBankDetails", arg0, arg1)
	ret0, _ := ret[0].(db.Bankdetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerBankDetails indicates an expected call of GetCustomerBankDetails.
func (mr *MockStoreMockRecorder) GetCustomerBankDetails(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerBankDetails", reflect.TypeOf((*MockStore)(nil).GetCustomerBankDetails), arg0, arg1)
}

// GetCustomerByEmail mocks base method.
func (m *MockStore) GetCustomerByEmail(arg0 context.Context, arg1 string) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByEmail indicates an expected call of GetCustomerByEmail.
func (mr *MockStoreMockRecorder) GetCustomerByEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByEmail", reflect.TypeOf((*MockStore)(nil).GetCustomerByEmail), arg0, arg1)
}

// GetCustomerByGoogleId mocks base method.
func (m *MockStore) GetCustomerByGoogleId(arg0 context.Context, arg1 sql.NullString) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByGoogleId", arg0, arg1)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByGoogleId indicates an expected call of GetCustomerByGoogleId.
func (mr *MockStoreMockRecorder) GetCustomerByGoogleId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByGoogleId", reflect.TypeOf((*MockStore)(nil).GetCustomerByGoogleId), arg0, arg1)
}

// GetCustomerById mocks base method.
func (m *MockStore) GetCustomerById(arg0 context.Context, arg1 int32) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerById", arg0, arg1)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerById indicates an expected call of GetCustomerById.
func (mr *MockStoreMockRecorder) GetCustomerById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerById", reflect.TypeOf((*MockStore)(nil).GetCustomerById), arg0, arg1)
}

// GetCustomerByPhoneNumber mocks base method.
func (m *MockStore) GetCustomerByPhoneNumber(arg0 context.Context, arg1 sql.NullString) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByPhoneNumber", arg0, arg1)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByPhoneNumber indicates an expected call of GetCustomerByPhoneNumber.
func (mr *MockStoreMockRecorder) GetCustomerByPhoneNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByPhoneNumber", reflect.TypeOf((*MockStore)(nil).GetCustomerByPhoneNumber), arg0, arg1)
}

// GetOneCoinSwapTransaction mocks base method.
func (m *MockStore) GetOneCoinSwapTransaction(arg0 context.Context, arg1 string) (db.Coinswap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneCoinSwapTransaction", arg0, arg1)
	ret0, _ := ret[0].(db.Coinswap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneCoinSwapTransaction indicates an expected call of GetOneCoinSwapTransaction.
func (mr *MockStoreMockRecorder) GetOneCoinSwapTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneCoinSwapTransaction", reflect.TypeOf((*MockStore)(nil).GetOneCoinSwapTransaction), arg0, arg1)
}

// GetPendingNetworkTransaction mocks base method.
func (m *MockStore) GetPendingNetworkTransaction(arg0 context.Context, arg1 db.GetPendingNetworkTransactionParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingNetworkTransaction", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingNetworkTransaction indicates an expected call of GetPendingNetworkTransaction.
func (mr *MockStoreMockRecorder) GetPendingNetworkTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingNetworkTransaction", reflect.TypeOf((*MockStore)(nil).GetPendingNetworkTransaction), arg0, arg1)
}

// GetUsdtAddress mocks base method.
func (m *MockStore) GetUsdtAddress(arg0 context.Context, arg1 int32) (sql.NullString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsdtAddress", arg0, arg1)
	ret0, _ := ret[0].(sql.NullString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsdtAddress indicates an expected call of GetUsdtAddress.
func (mr *MockStoreMockRecorder) GetUsdtAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsdtAddress", reflect.TypeOf((*MockStore)(nil).GetUsdtAddress), arg0, arg1)
}

// GetUsdtBscAddress mocks base method.
func (m *MockStore) GetUsdtBscAddress(arg0 context.Context, arg1 int32) (sql.NullString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsdtBscAddress", arg0, arg1)
	ret0, _ := ret[0].(sql.NullString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsdtBscAddress indicates an expected call of GetUsdtBscAddress.
func (mr *MockStoreMockRecorder) GetUsdtBscAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsdtBscAddress", reflect.TypeOf((*MockStore)(nil).GetUsdtBscAddress), arg0, arg1)
}

// GetUsdtTronAddress mocks base method.
func (m *MockStore) GetUsdtTronAddress(arg0 context.Context, arg1 int32) (sql.NullString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsdtTronAddress", arg0, arg1)
	ret0, _ := ret[0].(sql.NullString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsdtTronAddress indicates an expected call of GetUsdtTronAddress.
func (mr *MockStoreMockRecorder) GetUsdtTronAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsdtTronAddress", reflect.TypeOf((*MockStore)(nil).GetUsdtTronAddress), arg0, arg1)
}

// InsertCustomerBankDetails mocks base method.
func (m *MockStore) InsertCustomerBankDetails(arg0 context.Context, arg1 db.InsertCustomerBankDetailsParams) ([]db.Bankdetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCustomerBankDetails", arg0, arg1)
	ret0, _ := ret[0].([]db.Bankdetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertCustomerBankDetails indicates an expected call of InsertCustomerBankDetails.
func (mr *MockStoreMockRecorder) InsertCustomerBankDetails(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCustomerBankDetails", reflect.TypeOf((*MockStore)(nil).InsertCustomerBankDetails), arg0, arg1)
}

// InsertNewBtcAddress mocks base method.
func (m *MockStore) InsertNewBtcAddress(arg0 context.Context, arg1 db.InsertNewBtcAddressParams) (db.Customerasset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewBtcAddress", arg0, arg1)
	ret0, _ := ret[0].(db.Customerasset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertNewBtcAddress indicates an expected call of InsertNewBtcAddress.
func (mr *MockStoreMockRecorder) InsertNewBtcAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewBtcAddress", reflect.TypeOf((*MockStore)(nil).InsertNewBtcAddress), arg0, arg1)
}

// InsertNewUsdtAddress mocks base method.
func (m *MockStore) InsertNewUsdtAddress(arg0 context.Context, arg1 db.InsertNewUsdtAddressParams) (db.Customerasset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewUsdtAddress", arg0, arg1)
	ret0, _ := ret[0].(db.Customerasset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertNewUsdtAddress indicates an expected call of InsertNewUsdtAddress.
func (mr *MockStoreMockRecorder) InsertNewUsdtAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewUsdtAddress", reflect.TypeOf((*MockStore)(nil).InsertNewUsdtAddress), arg0, arg1)
}

// InsertNewUsdtBscAddress mocks base method.
func (m *MockStore) InsertNewUsdtBscAddress(arg0 context.Context, arg1 db.InsertNewUsdtBscAddressParams) (db.Customerasset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewUsdtBscAddress", arg0, arg1)
	ret0, _ := ret[0].(db.Customerasset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertNewUsdtBscAddress indicates an expected call of InsertNewUsdtBscAddress.
func (mr *MockStoreMockRecorder) InsertNewUsdtBscAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewUsdtBscAddress", reflect.TypeOf((*MockStore)(nil).InsertNewUsdtBscAddress), arg0, arg1)
}

// InsertNewUsdtTronAddress mocks base method.
func (m *MockStore) InsertNewUsdtTronAddress(arg0 context.Context, arg1 db.InsertNewUsdtTronAddressParams) (db.Customerasset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewUsdtTronAddress", arg0, arg1)
	ret0, _ := ret[0].(db.Customerasset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertNewUsdtTronAddress indicates an expected call of InsertNewUsdtTronAddress.
func (mr *MockStoreMockRecorder) InsertNewUsdtTronAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewUsdtTronAddress", reflect.TypeOf((*MockStore)(nil).InsertNewUsdtTronAddress), arg0, arg1)
}

// ListAllCoinSwapTransactions mocks base method.
func (m *MockStore) ListAllCoinSwapTransactions(arg0 context.Context, arg1 db.ListAllCoinSwapTransactionsParams) ([]db.Coinswap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllCoinSwapTransactions", arg0, arg1)
	ret0, _ := ret[0].([]db.Coinswap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllCoinSwapTransactions indicates an expected call of ListAllCoinSwapTransactions.
func (mr *MockStoreMockRecorder) ListAllCoinSwapTransactions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllCoinSwapTransactions", reflect.TypeOf((*MockStore)(nil).ListAllCoinSwapTransactions), arg0, arg1)
}

// RecentUsdtNgnRate mocks base method.
func (m *MockStore) RecentUsdtNgnRate(arg0 context.Context, arg1 string) (db.Usdtngnrate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecentUsdtNgnRate", arg0, arg1)
	ret0, _ := ret[0].(db.Usdtngnrate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecentUsdtNgnRate indicates an expected call of RecentUsdtNgnRate.
func (mr *MockStoreMockRecorder) RecentUsdtNgnRate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecentUsdtNgnRate", reflect.TypeOf((*MockStore)(nil).RecentUsdtNgnRate), arg0, arg1)
}

// ResetCustomerPassword mocks base method.
func (m *MockStore) ResetCustomerPassword(arg0 context.Context, arg1 db.ResetCustomerPasswordParams) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetCustomerPassword", arg0, arg1)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetCustomerPassword indicates an expected call of ResetCustomerPassword.
func (mr *MockStoreMockRecorder) ResetCustomerPassword(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetCustomerPassword", reflect.TypeOf((*MockStore)(nil).ResetCustomerPassword), arg0, arg1)
}

// UpdateBtcAddress mocks base method.
func (m *MockStore) UpdateBtcAddress(arg0 context.Context, arg1 db.UpdateBtcAddressParams) (db.Customerasset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBtcAddress", arg0, arg1)
	ret0, _ := ret[0].(db.Customerasset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBtcAddress indicates an expected call of UpdateBtcAddress.
func (mr *MockStoreMockRecorder) UpdateBtcAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBtcAddress", reflect.TypeOf((*MockStore)(nil).UpdateBtcAddress), arg0, arg1)
}

// UpdateCustomerPassword mocks base method.
func (m *MockStore) UpdateCustomerPassword(arg0 context.Context, arg1 db.UpdateCustomerPasswordParams) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomerPassword", arg0, arg1)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomerPassword indicates an expected call of UpdateCustomerPassword.
func (mr *MockStoreMockRecorder) UpdateCustomerPassword(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomerPassword", reflect.TypeOf((*MockStore)(nil).UpdateCustomerPassword), arg0, arg1)
}

// UpdateSwapWithBitpowrInfo mocks base method.
func (m *MockStore) UpdateSwapWithBitpowrInfo(arg0 context.Context, arg1 db.UpdateSwapWithBitpowrInfoParams) (db.Coinswap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSwapWithBitpowrInfo", arg0, arg1)
	ret0, _ := ret[0].(db.Coinswap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSwapWithBitpowrInfo indicates an expected call of UpdateSwapWithBitpowrInfo.
func (mr *MockStoreMockRecorder) UpdateSwapWithBitpowrInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSwapWithBitpowrInfo", reflect.TypeOf((*MockStore)(nil).UpdateSwapWithBitpowrInfo), arg0, arg1)
}

// UpdateSwapWithShutterInfo mocks base method.
func (m *MockStore) UpdateSwapWithShutterInfo(arg0 context.Context, arg1 db.UpdateSwapWithShutterInfoParams) (db.Coinswap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSwapWithShutterInfo", arg0, arg1)
	ret0, _ := ret[0].(db.Coinswap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSwapWithShutterInfo indicates an expected call of UpdateSwapWithShutterInfo.
func (mr *MockStoreMockRecorder) UpdateSwapWithShutterInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSwapWithShutterInfo", reflect.TypeOf((*MockStore)(nil).UpdateSwapWithShutterInfo), arg0, arg1)
}

// UpdateUsdtAddress mocks base method.
func (m *MockStore) UpdateUsdtAddress(arg0 context.Context, arg1 db.UpdateUsdtAddressParams) (db.Customerasset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsdtAddress", arg0, arg1)
	ret0, _ := ret[0].(db.Customerasset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUsdtAddress indicates an expected call of UpdateUsdtAddress.
func (mr *MockStoreMockRecorder) UpdateUsdtAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsdtAddress", reflect.TypeOf((*MockStore)(nil).UpdateUsdtAddress), arg0, arg1)
}

// UpdateUsdtBscAddress mocks base method.
func (m *MockStore) UpdateUsdtBscAddress(arg0 context.Context, arg1 db.UpdateUsdtBscAddressParams) (db.Customerasset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsdtBscAddress", arg0, arg1)
	ret0, _ := ret[0].(db.Customerasset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUsdtBscAddress indicates an expected call of UpdateUsdtBscAddress.
func (mr *MockStoreMockRecorder) UpdateUsdtBscAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsdtBscAddress", reflect.TypeOf((*MockStore)(nil).UpdateUsdtBscAddress), arg0, arg1)
}

// UpdateUsdtTronAddress mocks base method.
func (m *MockStore) UpdateUsdtTronAddress(arg0 context.Context, arg1 db.UpdateUsdtTronAddressParams) (db.Customerasset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsdtTronAddress", arg0, arg1)
	ret0, _ := ret[0].(db.Customerasset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUsdtTronAddress indicates an expected call of UpdateUsdtTronAddress.
func (mr *MockStoreMockRecorder) UpdateUsdtTronAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsdtTronAddress", reflect.TypeOf((*MockStore)(nil).UpdateUsdtTronAddress), arg0, arg1)
}
