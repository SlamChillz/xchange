// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: coinswap.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createSwap = `-- name: CreateSwap :one
INSERT INTO coinswap (
    coin_name, coin_amount_to_swap, network, phone_number,
    coin_address, transaction_ref, transaction_status, current_usdt_ngn_rate,
    customer_id, ngn_equivalent, bank_acc_name, bank_acc_number, bank_code
) VALUES (
    $1, $2, $3, $4, $5, $6, $7,
    $8, $9, $10, $11, $12, $13
) RETURNING id, coin_name, coin_amount_to_swap, network, phone_number, coin_address, transaction_ref,
transaction_status, current_usdt_ngn_rate, customer_id, ngn_equivalent, bank_acc_name, bank_acc_number, bank_code, created_at
`

type CreateSwapParams struct {
	CoinName           string `json:"coin_name"`
	CoinAmountToSwap   string `json:"coin_amount_to_swap"`
	Network            string `json:"network"`
	PhoneNumber        string `json:"phone_number"`
	CoinAddress        string `json:"coin_address"`
	TransactionRef     string `json:"transaction_ref"`
	TransactionStatus  string `json:"transaction_status"`
	CurrentUsdtNgnRate string `json:"current_usdt_ngn_rate"`
	CustomerID         int32  `json:"customer_id"`
	NgnEquivalent      string `json:"ngn_equivalent"`
	BankAccName        string `json:"bank_acc_name"`
	BankAccNumber      string `json:"bank_acc_number"`
	BankCode           string `json:"bank_code"`
}

type CreateSwapRow struct {
	ID                 int32     `json:"id"`
	CoinName           string    `json:"coin_name"`
	CoinAmountToSwap   string    `json:"coin_amount_to_swap"`
	Network            string    `json:"network"`
	PhoneNumber        string    `json:"phone_number"`
	CoinAddress        string    `json:"coin_address"`
	TransactionRef     string    `json:"transaction_ref"`
	TransactionStatus  string    `json:"transaction_status"`
	CurrentUsdtNgnRate string    `json:"current_usdt_ngn_rate"`
	CustomerID         int32     `json:"customer_id"`
	NgnEquivalent      string    `json:"ngn_equivalent"`
	BankAccName        string    `json:"bank_acc_name"`
	BankAccNumber      string    `json:"bank_acc_number"`
	BankCode           string    `json:"bank_code"`
	CreatedAt          time.Time `json:"created_at"`
}

func (q *Queries) CreateSwap(ctx context.Context, arg CreateSwapParams) (CreateSwapRow, error) {
	row := q.db.QueryRowContext(ctx, createSwap,
		arg.CoinName,
		arg.CoinAmountToSwap,
		arg.Network,
		arg.PhoneNumber,
		arg.CoinAddress,
		arg.TransactionRef,
		arg.TransactionStatus,
		arg.CurrentUsdtNgnRate,
		arg.CustomerID,
		arg.NgnEquivalent,
		arg.BankAccName,
		arg.BankAccNumber,
		arg.BankCode,
	)
	var i CreateSwapRow
	err := row.Scan(
		&i.ID,
		&i.CoinName,
		&i.CoinAmountToSwap,
		&i.Network,
		&i.PhoneNumber,
		&i.CoinAddress,
		&i.TransactionRef,
		&i.TransactionStatus,
		&i.CurrentUsdtNgnRate,
		&i.CustomerID,
		&i.NgnEquivalent,
		&i.BankAccName,
		&i.BankAccNumber,
		&i.BankCode,
		&i.CreatedAt,
	)
	return i, err
}

const getPendingNetworkTransaction = `-- name: GetPendingNetworkTransaction :one
SELECT COUNT(*) FROM coinswap WHERE customer_id = $1 AND network = $2 AND transaction_status = $3
`

type GetPendingNetworkTransactionParams struct {
	CustomerID        int32  `json:"customer_id"`
	Network           string `json:"network"`
	TransactionStatus string `json:"transaction_status"`
}

func (q *Queries) GetPendingNetworkTransaction(ctx context.Context, arg GetPendingNetworkTransactionParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPendingNetworkTransaction, arg.CustomerID, arg.Network, arg.TransactionStatus)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateSwap = `-- name: UpdateSwap :one
UPDATE coinswap 
SET bitpowr_ref = $1,
    trans_address = $2,
    trans_amount = $3,
    trans_chain = $4,
    trans_hash = $5,
    admin_trans_amount = $6,
    admin_trans_fee = $7,
    admin_trans_ref = $8,
    admin_trans_uid = $9,
    trans_amount_ngn = $10
WHERE id = $11
RETURNING id, coin_name, coin_amount_to_swap, network, phone_number, coin_address, transaction_ref, transaction_status, current_usdt_ngn_rate, customer_id, ngn_equivalent, payout_status, bank_acc_name, bank_acc_number, bitpowr_ref, trans_address, trans_amount, trans_chain, trans_hash, bank_code, admin_trans_amount, admin_trans_fee, admin_trans_ref, admin_trans_uid, trans_amount_ngn, created_at, updated_at
`

type UpdateSwapParams struct {
	BitpowrRef       sql.NullString `json:"bitpowr_ref"`
	TransAddress     sql.NullString `json:"trans_address"`
	TransAmount      sql.NullString `json:"trans_amount"`
	TransChain       sql.NullString `json:"trans_chain"`
	TransHash        sql.NullString `json:"trans_hash"`
	AdminTransAmount sql.NullString `json:"admin_trans_amount"`
	AdminTransFee    sql.NullString `json:"admin_trans_fee"`
	AdminTransRef    sql.NullString `json:"admin_trans_ref"`
	AdminTransUid    sql.NullString `json:"admin_trans_uid"`
	TransAmountNgn   sql.NullString `json:"trans_amount_ngn"`
	ID               int32          `json:"id"`
}

func (q *Queries) UpdateSwap(ctx context.Context, arg UpdateSwapParams) (Coinswap, error) {
	row := q.db.QueryRowContext(ctx, updateSwap,
		arg.BitpowrRef,
		arg.TransAddress,
		arg.TransAmount,
		arg.TransChain,
		arg.TransHash,
		arg.AdminTransAmount,
		arg.AdminTransFee,
		arg.AdminTransRef,
		arg.AdminTransUid,
		arg.TransAmountNgn,
		arg.ID,
	)
	var i Coinswap
	err := row.Scan(
		&i.ID,
		&i.CoinName,
		&i.CoinAmountToSwap,
		&i.Network,
		&i.PhoneNumber,
		&i.CoinAddress,
		&i.TransactionRef,
		&i.TransactionStatus,
		&i.CurrentUsdtNgnRate,
		&i.CustomerID,
		&i.NgnEquivalent,
		&i.PayoutStatus,
		&i.BankAccName,
		&i.BankAccNumber,
		&i.BitpowrRef,
		&i.TransAddress,
		&i.TransAmount,
		&i.TransChain,
		&i.TransHash,
		&i.BankCode,
		&i.AdminTransAmount,
		&i.AdminTransFee,
		&i.AdminTransRef,
		&i.AdminTransUid,
		&i.TransAmountNgn,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
