// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: bankdetails.sql

package db

import (
	"context"
)

const getCustomerBankDetails = `-- name: GetCustomerBankDetails :one
SELECT id, bank_name, bank_code, account_name, account_number, customer_id, created_at, updated_at FROM bankdetails WHERE customer_id = $1
`

func (q *Queries) GetCustomerBankDetails(ctx context.Context, customerID int32) (Bankdetail, error) {
	row := q.db.QueryRowContext(ctx, getCustomerBankDetails, customerID)
	var i Bankdetail
	err := row.Scan(
		&i.ID,
		&i.BankName,
		&i.BankCode,
		&i.AccountName,
		&i.AccountNumber,
		&i.CustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertCustomerBankDetails = `-- name: InsertCustomerBankDetails :many
INSERT INTO bankdetails (
    customer_id,
    bank_name,
    bank_code,
    account_number,
    account_name
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, bank_name, bank_code, account_name, account_number, customer_id, created_at, updated_at
`

type InsertCustomerBankDetailsParams struct {
	CustomerID    int32  `json:"customer_id"`
	BankName      string `json:"bank_name"`
	BankCode      string `json:"bank_code"`
	AccountNumber string `json:"account_number"`
	AccountName   string `json:"account_name"`
}

func (q *Queries) InsertCustomerBankDetails(ctx context.Context, arg InsertCustomerBankDetailsParams) ([]Bankdetail, error) {
	rows, err := q.db.QueryContext(ctx, insertCustomerBankDetails,
		arg.CustomerID,
		arg.BankName,
		arg.BankCode,
		arg.AccountNumber,
		arg.AccountName,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Bankdetail{}
	for rows.Next() {
		var i Bankdetail
		if err := rows.Scan(
			&i.ID,
			&i.BankName,
			&i.BankCode,
			&i.AccountName,
			&i.AccountNumber,
			&i.CustomerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
