// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: address.sql

package db

import (
	"context"
	"database/sql"
)

const getBtcAddress = `-- name: GetBtcAddress :one
SELECT btc_address FROM customerasset WHERE customer_id = $1
`

func (q *Queries) GetBtcAddress(ctx context.Context, customerID int32) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getBtcAddress, customerID)
	var btc_address sql.NullString
	err := row.Scan(&btc_address)
	return btc_address, err
}

const getUsdtAddress = `-- name: GetUsdtAddress :one
SELECT usdt_address FROM customerasset WHERE customer_id = $1
`

func (q *Queries) GetUsdtAddress(ctx context.Context, customerID int32) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getUsdtAddress, customerID)
	var usdt_address sql.NullString
	err := row.Scan(&usdt_address)
	return usdt_address, err
}

const getUsdtBscAddress = `-- name: GetUsdtBscAddress :one
SELECT usdt_bsc_address FROM customerasset WHERE customer_id = $1
`

func (q *Queries) GetUsdtBscAddress(ctx context.Context, customerID int32) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getUsdtBscAddress, customerID)
	var usdt_bsc_address sql.NullString
	err := row.Scan(&usdt_bsc_address)
	return usdt_bsc_address, err
}

const getUsdtTronAddress = `-- name: GetUsdtTronAddress :one
SELECT usdt_tron_address FROM customerasset WHERE customer_id = $1
`

func (q *Queries) GetUsdtTronAddress(ctx context.Context, customerID int32) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getUsdtTronAddress, customerID)
	var usdt_tron_address sql.NullString
	err := row.Scan(&usdt_tron_address)
	return usdt_tron_address, err
}

const insertNewBtcAddress = `-- name: InsertNewBtcAddress :one
INSERT INTO customerasset (btc_network, btc_address, btc_address_uid, customer_id) VALUES ($1, $2, $3, $4) RETURNING id, btc_network, btc_address, btc_address_uid, usdt_network, usdt_address, usdt_address_uid, usdt_tron_network, usdt_tron_address, usdt_tron_address_uid, usdt_bsc_network, usdt_bsc_address, usdt_bsc_address_uid, customer_id, created_at, updated_at
`

type InsertNewBtcAddressParams struct {
	BtcNetwork    sql.NullString `json:"btc_network"`
	BtcAddress    sql.NullString `json:"btc_address"`
	BtcAddressUid sql.NullString `json:"btc_address_uid"`
	CustomerID    int32          `json:"customer_id"`
}

func (q *Queries) InsertNewBtcAddress(ctx context.Context, arg InsertNewBtcAddressParams) (Customerasset, error) {
	row := q.db.QueryRowContext(ctx, insertNewBtcAddress,
		arg.BtcNetwork,
		arg.BtcAddress,
		arg.BtcAddressUid,
		arg.CustomerID,
	)
	var i Customerasset
	err := row.Scan(
		&i.ID,
		&i.BtcNetwork,
		&i.BtcAddress,
		&i.BtcAddressUid,
		&i.UsdtNetwork,
		&i.UsdtAddress,
		&i.UsdtAddressUid,
		&i.UsdtTronNetwork,
		&i.UsdtTronAddress,
		&i.UsdtTronAddressUid,
		&i.UsdtBscNetwork,
		&i.UsdtBscAddress,
		&i.UsdtBscAddressUid,
		&i.CustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertNewUsdtAddress = `-- name: InsertNewUsdtAddress :one
INSERT INTO customerasset (usdt_network, usdt_address, usdt_address_uid, customer_id) VALUES ($1, $2, $3, $4) RETURNING id, btc_network, btc_address, btc_address_uid, usdt_network, usdt_address, usdt_address_uid, usdt_tron_network, usdt_tron_address, usdt_tron_address_uid, usdt_bsc_network, usdt_bsc_address, usdt_bsc_address_uid, customer_id, created_at, updated_at
`

type InsertNewUsdtAddressParams struct {
	UsdtNetwork    sql.NullString `json:"usdt_network"`
	UsdtAddress    sql.NullString `json:"usdt_address"`
	UsdtAddressUid sql.NullString `json:"usdt_address_uid"`
	CustomerID     int32          `json:"customer_id"`
}

func (q *Queries) InsertNewUsdtAddress(ctx context.Context, arg InsertNewUsdtAddressParams) (Customerasset, error) {
	row := q.db.QueryRowContext(ctx, insertNewUsdtAddress,
		arg.UsdtNetwork,
		arg.UsdtAddress,
		arg.UsdtAddressUid,
		arg.CustomerID,
	)
	var i Customerasset
	err := row.Scan(
		&i.ID,
		&i.BtcNetwork,
		&i.BtcAddress,
		&i.BtcAddressUid,
		&i.UsdtNetwork,
		&i.UsdtAddress,
		&i.UsdtAddressUid,
		&i.UsdtTronNetwork,
		&i.UsdtTronAddress,
		&i.UsdtTronAddressUid,
		&i.UsdtBscNetwork,
		&i.UsdtBscAddress,
		&i.UsdtBscAddressUid,
		&i.CustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertNewUsdtBscAddress = `-- name: InsertNewUsdtBscAddress :one
INSERT INTO customerasset (usdt_bsc_network, usdt_bsc_address, usdt_bsc_address_uid, customer_id) VALUES ($1, $2, $3, $4) RETURNING id, btc_network, btc_address, btc_address_uid, usdt_network, usdt_address, usdt_address_uid, usdt_tron_network, usdt_tron_address, usdt_tron_address_uid, usdt_bsc_network, usdt_bsc_address, usdt_bsc_address_uid, customer_id, created_at, updated_at
`

type InsertNewUsdtBscAddressParams struct {
	UsdtBscNetwork    sql.NullString `json:"usdt_bsc_network"`
	UsdtBscAddress    sql.NullString `json:"usdt_bsc_address"`
	UsdtBscAddressUid sql.NullString `json:"usdt_bsc_address_uid"`
	CustomerID        int32          `json:"customer_id"`
}

func (q *Queries) InsertNewUsdtBscAddress(ctx context.Context, arg InsertNewUsdtBscAddressParams) (Customerasset, error) {
	row := q.db.QueryRowContext(ctx, insertNewUsdtBscAddress,
		arg.UsdtBscNetwork,
		arg.UsdtBscAddress,
		arg.UsdtBscAddressUid,
		arg.CustomerID,
	)
	var i Customerasset
	err := row.Scan(
		&i.ID,
		&i.BtcNetwork,
		&i.BtcAddress,
		&i.BtcAddressUid,
		&i.UsdtNetwork,
		&i.UsdtAddress,
		&i.UsdtAddressUid,
		&i.UsdtTronNetwork,
		&i.UsdtTronAddress,
		&i.UsdtTronAddressUid,
		&i.UsdtBscNetwork,
		&i.UsdtBscAddress,
		&i.UsdtBscAddressUid,
		&i.CustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertNewUsdtTronAddress = `-- name: InsertNewUsdtTronAddress :one
INSERT INTO customerasset (usdt_tron_network, usdt_tron_address, usdt_tron_address_uid, customer_id) VALUES ($1, $2, $3, $4) RETURNING id, btc_network, btc_address, btc_address_uid, usdt_network, usdt_address, usdt_address_uid, usdt_tron_network, usdt_tron_address, usdt_tron_address_uid, usdt_bsc_network, usdt_bsc_address, usdt_bsc_address_uid, customer_id, created_at, updated_at
`

type InsertNewUsdtTronAddressParams struct {
	UsdtTronNetwork    sql.NullString `json:"usdt_tron_network"`
	UsdtTronAddress    sql.NullString `json:"usdt_tron_address"`
	UsdtTronAddressUid sql.NullString `json:"usdt_tron_address_uid"`
	CustomerID         int32          `json:"customer_id"`
}

func (q *Queries) InsertNewUsdtTronAddress(ctx context.Context, arg InsertNewUsdtTronAddressParams) (Customerasset, error) {
	row := q.db.QueryRowContext(ctx, insertNewUsdtTronAddress,
		arg.UsdtTronNetwork,
		arg.UsdtTronAddress,
		arg.UsdtTronAddressUid,
		arg.CustomerID,
	)
	var i Customerasset
	err := row.Scan(
		&i.ID,
		&i.BtcNetwork,
		&i.BtcAddress,
		&i.BtcAddressUid,
		&i.UsdtNetwork,
		&i.UsdtAddress,
		&i.UsdtAddressUid,
		&i.UsdtTronNetwork,
		&i.UsdtTronAddress,
		&i.UsdtTronAddressUid,
		&i.UsdtBscNetwork,
		&i.UsdtBscAddress,
		&i.UsdtBscAddressUid,
		&i.CustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateBtcAddress = `-- name: UpdateBtcAddress :one
UPDATE customerasset SET btc_network = $1, btc_address = $2, btc_address_uid = $3 WHERE customer_id = $4 RETURNING id, btc_network, btc_address, btc_address_uid, usdt_network, usdt_address, usdt_address_uid, usdt_tron_network, usdt_tron_address, usdt_tron_address_uid, usdt_bsc_network, usdt_bsc_address, usdt_bsc_address_uid, customer_id, created_at, updated_at
`

type UpdateBtcAddressParams struct {
	BtcNetwork    sql.NullString `json:"btc_network"`
	BtcAddress    sql.NullString `json:"btc_address"`
	BtcAddressUid sql.NullString `json:"btc_address_uid"`
	CustomerID    int32          `json:"customer_id"`
}

func (q *Queries) UpdateBtcAddress(ctx context.Context, arg UpdateBtcAddressParams) (Customerasset, error) {
	row := q.db.QueryRowContext(ctx, updateBtcAddress,
		arg.BtcNetwork,
		arg.BtcAddress,
		arg.BtcAddressUid,
		arg.CustomerID,
	)
	var i Customerasset
	err := row.Scan(
		&i.ID,
		&i.BtcNetwork,
		&i.BtcAddress,
		&i.BtcAddressUid,
		&i.UsdtNetwork,
		&i.UsdtAddress,
		&i.UsdtAddressUid,
		&i.UsdtTronNetwork,
		&i.UsdtTronAddress,
		&i.UsdtTronAddressUid,
		&i.UsdtBscNetwork,
		&i.UsdtBscAddress,
		&i.UsdtBscAddressUid,
		&i.CustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUsdtAddress = `-- name: UpdateUsdtAddress :one
UPDATE customerasset SET usdt_network = $1, usdt_address = $2, usdt_address_uid = $3 WHERE customer_id = $4 RETURNING id, btc_network, btc_address, btc_address_uid, usdt_network, usdt_address, usdt_address_uid, usdt_tron_network, usdt_tron_address, usdt_tron_address_uid, usdt_bsc_network, usdt_bsc_address, usdt_bsc_address_uid, customer_id, created_at, updated_at
`

type UpdateUsdtAddressParams struct {
	UsdtNetwork    sql.NullString `json:"usdt_network"`
	UsdtAddress    sql.NullString `json:"usdt_address"`
	UsdtAddressUid sql.NullString `json:"usdt_address_uid"`
	CustomerID     int32          `json:"customer_id"`
}

func (q *Queries) UpdateUsdtAddress(ctx context.Context, arg UpdateUsdtAddressParams) (Customerasset, error) {
	row := q.db.QueryRowContext(ctx, updateUsdtAddress,
		arg.UsdtNetwork,
		arg.UsdtAddress,
		arg.UsdtAddressUid,
		arg.CustomerID,
	)
	var i Customerasset
	err := row.Scan(
		&i.ID,
		&i.BtcNetwork,
		&i.BtcAddress,
		&i.BtcAddressUid,
		&i.UsdtNetwork,
		&i.UsdtAddress,
		&i.UsdtAddressUid,
		&i.UsdtTronNetwork,
		&i.UsdtTronAddress,
		&i.UsdtTronAddressUid,
		&i.UsdtBscNetwork,
		&i.UsdtBscAddress,
		&i.UsdtBscAddressUid,
		&i.CustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUsdtBscAddress = `-- name: UpdateUsdtBscAddress :one
UPDATE customerasset SET usdt_bsc_network = $1, usdt_bsc_address = $2, usdt_bsc_address_uid = $3 WHERE customer_id = $4 RETURNING id, btc_network, btc_address, btc_address_uid, usdt_network, usdt_address, usdt_address_uid, usdt_tron_network, usdt_tron_address, usdt_tron_address_uid, usdt_bsc_network, usdt_bsc_address, usdt_bsc_address_uid, customer_id, created_at, updated_at
`

type UpdateUsdtBscAddressParams struct {
	UsdtBscNetwork    sql.NullString `json:"usdt_bsc_network"`
	UsdtBscAddress    sql.NullString `json:"usdt_bsc_address"`
	UsdtBscAddressUid sql.NullString `json:"usdt_bsc_address_uid"`
	CustomerID        int32          `json:"customer_id"`
}

func (q *Queries) UpdateUsdtBscAddress(ctx context.Context, arg UpdateUsdtBscAddressParams) (Customerasset, error) {
	row := q.db.QueryRowContext(ctx, updateUsdtBscAddress,
		arg.UsdtBscNetwork,
		arg.UsdtBscAddress,
		arg.UsdtBscAddressUid,
		arg.CustomerID,
	)
	var i Customerasset
	err := row.Scan(
		&i.ID,
		&i.BtcNetwork,
		&i.BtcAddress,
		&i.BtcAddressUid,
		&i.UsdtNetwork,
		&i.UsdtAddress,
		&i.UsdtAddressUid,
		&i.UsdtTronNetwork,
		&i.UsdtTronAddress,
		&i.UsdtTronAddressUid,
		&i.UsdtBscNetwork,
		&i.UsdtBscAddress,
		&i.UsdtBscAddressUid,
		&i.CustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUsdtTronAddress = `-- name: UpdateUsdtTronAddress :one
UPDATE customerasset SET usdt_tron_network = $1, usdt_tron_address = $2, usdt_tron_address_uid = $3 WHERE customer_id = $4 RETURNING id, btc_network, btc_address, btc_address_uid, usdt_network, usdt_address, usdt_address_uid, usdt_tron_network, usdt_tron_address, usdt_tron_address_uid, usdt_bsc_network, usdt_bsc_address, usdt_bsc_address_uid, customer_id, created_at, updated_at
`

type UpdateUsdtTronAddressParams struct {
	UsdtTronNetwork    sql.NullString `json:"usdt_tron_network"`
	UsdtTronAddress    sql.NullString `json:"usdt_tron_address"`
	UsdtTronAddressUid sql.NullString `json:"usdt_tron_address_uid"`
	CustomerID         int32          `json:"customer_id"`
}

func (q *Queries) UpdateUsdtTronAddress(ctx context.Context, arg UpdateUsdtTronAddressParams) (Customerasset, error) {
	row := q.db.QueryRowContext(ctx, updateUsdtTronAddress,
		arg.UsdtTronNetwork,
		arg.UsdtTronAddress,
		arg.UsdtTronAddressUid,
		arg.CustomerID,
	)
	var i Customerasset
	err := row.Scan(
		&i.ID,
		&i.BtcNetwork,
		&i.BtcAddress,
		&i.BtcAddressUid,
		&i.UsdtNetwork,
		&i.UsdtAddress,
		&i.UsdtAddressUid,
		&i.UsdtTronNetwork,
		&i.UsdtTronAddress,
		&i.UsdtTronAddressUid,
		&i.UsdtBscNetwork,
		&i.UsdtBscAddress,
		&i.UsdtBscAddressUid,
		&i.CustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
