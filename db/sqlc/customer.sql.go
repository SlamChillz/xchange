// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: customer.sql

package db

import (
	"context"
	"database/sql"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customer (
    first_name,
    last_name,
    email,
    password,
    phone,
    photo,
    google_id
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
) RETURNING id, last_login, photo, first_name, last_name, email, password, phone, is_active, is_staff, is_supercustomer, created_at, updated_at, google_id
`

type CreateCustomerParams struct {
	FirstName string         `json:"first_name"`
	LastName  string         `json:"last_name"`
	Email     string         `json:"email"`
	Password  sql.NullString `json:"password"`
	Phone     sql.NullString `json:"phone"`
	Photo     sql.NullString `json:"photo"`
	GoogleID  sql.NullString `json:"google_id"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.Phone,
		arg.Photo,
		arg.GoogleID,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.LastLogin,
		&i.Photo,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.IsActive,
		&i.IsStaff,
		&i.IsSupercustomer,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GoogleID,
	)
	return i, err
}

const getCustomerByEmail = `-- name: GetCustomerByEmail :one
SELECT id, last_login, photo, first_name, last_name, email, password, phone, is_active, is_staff, is_supercustomer, created_at, updated_at, google_id FROM customer WHERE email = $1
`

func (q *Queries) GetCustomerByEmail(ctx context.Context, email string) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByEmail, email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.LastLogin,
		&i.Photo,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.IsActive,
		&i.IsStaff,
		&i.IsSupercustomer,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GoogleID,
	)
	return i, err
}

const getCustomerByGoogleId = `-- name: GetCustomerByGoogleId :one
SELECT id, last_login, photo, first_name, last_name, email, password, phone, is_active, is_staff, is_supercustomer, created_at, updated_at, google_id FROM customer WHERE google_id = $1
`

func (q *Queries) GetCustomerByGoogleId(ctx context.Context, googleID sql.NullString) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByGoogleId, googleID)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.LastLogin,
		&i.Photo,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.IsActive,
		&i.IsStaff,
		&i.IsSupercustomer,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GoogleID,
	)
	return i, err
}

const getCustomerById = `-- name: GetCustomerById :one
SELECT id, last_login, photo, first_name, last_name, email, password, phone, is_active, is_staff, is_supercustomer, created_at, updated_at, google_id FROM customer WHERE id = $1
`

func (q *Queries) GetCustomerById(ctx context.Context, id int32) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerById, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.LastLogin,
		&i.Photo,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.IsActive,
		&i.IsStaff,
		&i.IsSupercustomer,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GoogleID,
	)
	return i, err
}

const getCustomerByPhoneNumber = `-- name: GetCustomerByPhoneNumber :one
SELECT id, last_login, photo, first_name, last_name, email, password, phone, is_active, is_staff, is_supercustomer, created_at, updated_at, google_id FROM customer WHERE phone = $1
`

func (q *Queries) GetCustomerByPhoneNumber(ctx context.Context, phone sql.NullString) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByPhoneNumber, phone)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.LastLogin,
		&i.Photo,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.IsActive,
		&i.IsStaff,
		&i.IsSupercustomer,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GoogleID,
	)
	return i, err
}

const resetCustomerPassword = `-- name: ResetCustomerPassword :one
UPDATE customer
SET password = $2
WHERE email = $1
RETURNING id, last_login, photo, first_name, last_name, email, password, phone, is_active, is_staff, is_supercustomer, created_at, updated_at, google_id
`

type ResetCustomerPasswordParams struct {
	Email    string         `json:"email"`
	Password sql.NullString `json:"password"`
}

func (q *Queries) ResetCustomerPassword(ctx context.Context, arg ResetCustomerPasswordParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, resetCustomerPassword, arg.Email, arg.Password)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.LastLogin,
		&i.Photo,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.IsActive,
		&i.IsStaff,
		&i.IsSupercustomer,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GoogleID,
	)
	return i, err
}

const updateCustomerActiveStatus = `-- name: UpdateCustomerActiveStatus :one
UPDATE customer
SET is_active  = $1
WHERE email = $2
RETURNING id, last_login, photo, first_name, last_name, email, password, phone, is_active, is_staff, is_supercustomer, created_at, updated_at, google_id
`

type UpdateCustomerActiveStatusParams struct {
	IsActive bool   `json:"is_active"`
	Email    string `json:"email"`
}

func (q *Queries) UpdateCustomerActiveStatus(ctx context.Context, arg UpdateCustomerActiveStatusParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, updateCustomerActiveStatus, arg.IsActive, arg.Email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.LastLogin,
		&i.Photo,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.IsActive,
		&i.IsStaff,
		&i.IsSupercustomer,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GoogleID,
	)
	return i, err
}

const updateCustomerPassword = `-- name: UpdateCustomerPassword :one
UPDATE customer
SET password = $2
WHERE id = $1
RETURNING id, last_login, photo, first_name, last_name, email, password, phone, is_active, is_staff, is_supercustomer, created_at, updated_at, google_id
`

type UpdateCustomerPasswordParams struct {
	ID       int32          `json:"id"`
	Password sql.NullString `json:"password"`
}

func (q *Queries) UpdateCustomerPassword(ctx context.Context, arg UpdateCustomerPasswordParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, updateCustomerPassword, arg.ID, arg.Password)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.LastLogin,
		&i.Photo,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.IsActive,
		&i.IsStaff,
		&i.IsSupercustomer,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GoogleID,
	)
	return i, err
}
