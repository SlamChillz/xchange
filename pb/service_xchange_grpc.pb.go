// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: service_xchange.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// XchangeClient is the client API for Xchange service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XchangeClient interface {
	CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error)
	LoginCustomer(ctx context.Context, in *LoginCustomerRequest, opts ...grpc.CallOption) (*LoginCustomerResponse, error)
	CoinSwap(ctx context.Context, in *CoinSwapRequest, opts ...grpc.CallOption) (*CoinSwapResponse, error)
}

type xchangeClient struct {
	cc grpc.ClientConnInterface
}

func NewXchangeClient(cc grpc.ClientConnInterface) XchangeClient {
	return &xchangeClient{cc}
}

func (c *xchangeClient) CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error) {
	out := new(CreateCustomerResponse)
	err := c.cc.Invoke(ctx, "/pb.Xchange/CreateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchangeClient) LoginCustomer(ctx context.Context, in *LoginCustomerRequest, opts ...grpc.CallOption) (*LoginCustomerResponse, error) {
	out := new(LoginCustomerResponse)
	err := c.cc.Invoke(ctx, "/pb.Xchange/LoginCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xchangeClient) CoinSwap(ctx context.Context, in *CoinSwapRequest, opts ...grpc.CallOption) (*CoinSwapResponse, error) {
	out := new(CoinSwapResponse)
	err := c.cc.Invoke(ctx, "/pb.Xchange/CoinSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XchangeServer is the server API for Xchange service.
// All implementations must embed UnimplementedXchangeServer
// for forward compatibility
type XchangeServer interface {
	CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerResponse, error)
	LoginCustomer(context.Context, *LoginCustomerRequest) (*LoginCustomerResponse, error)
	CoinSwap(context.Context, *CoinSwapRequest) (*CoinSwapResponse, error)
	mustEmbedUnimplementedXchangeServer()
}

// UnimplementedXchangeServer must be embedded to have forward compatible implementations.
type UnimplementedXchangeServer struct {
}

func (UnimplementedXchangeServer) CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomer not implemented")
}
func (UnimplementedXchangeServer) LoginCustomer(context.Context, *LoginCustomerRequest) (*LoginCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginCustomer not implemented")
}
func (UnimplementedXchangeServer) CoinSwap(context.Context, *CoinSwapRequest) (*CoinSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoinSwap not implemented")
}
func (UnimplementedXchangeServer) mustEmbedUnimplementedXchangeServer() {}

// UnsafeXchangeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XchangeServer will
// result in compilation errors.
type UnsafeXchangeServer interface {
	mustEmbedUnimplementedXchangeServer()
}

func RegisterXchangeServer(s grpc.ServiceRegistrar, srv XchangeServer) {
	s.RegisterService(&Xchange_ServiceDesc, srv)
}

func _Xchange_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchangeServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchange/CreateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchangeServer).CreateCustomer(ctx, req.(*CreateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchange_LoginCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchangeServer).LoginCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchange/LoginCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchangeServer).LoginCustomer(ctx, req.(*LoginCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xchange_CoinSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XchangeServer).CoinSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xchange/CoinSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XchangeServer).CoinSwap(ctx, req.(*CoinSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Xchange_ServiceDesc is the grpc.ServiceDesc for Xchange service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Xchange_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Xchange",
	HandlerType: (*XchangeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCustomer",
			Handler:    _Xchange_CreateCustomer_Handler,
		},
		{
			MethodName: "LoginCustomer",
			Handler:    _Xchange_LoginCustomer_Handler,
		},
		{
			MethodName: "CoinSwap",
			Handler:    _Xchange_CoinSwap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_xchange.proto",
}
